{"pytest_version": "5.2.0", "$report_type": "SessionStart"}
{"nodeid": "", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "Caps/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "Common/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "PageLocators/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "PageObjects/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_0_login.py::TestLogin", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_0_login.py::TestLogin", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_0_login.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestDatas/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_0_login.py::TestLogin::test_prepare", "location": ["TestCases\\test_0_login.py", 14, "TestLogin.test_prepare"], "keywords": {"()": 1, "TestCases/__init__.py": 1, "AppFramework": 1, "TestLogin": 1, "pytestmark": 1, "test_0_login.py": 1, "test_prepare": 1, "test": 1, "test1": 1, "usefixtures": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [["Captured log setup", "\u001b[32mINFO    \u001b[0m root:conftest.py:65 xxxxxxx"]], "duration": 13.265767812728882, "_report_type": "TestReport"}
{"nodeid": "TestCases/test_0_login.py::TestLogin::test_prepare", "location": ["TestCases\\test_0_login.py", 14, "TestLogin.test_prepare"], "keywords": {"()": 1, "TestCases/__init__.py": 1, "AppFramework": 1, "TestLogin": 1, "pytestmark": 1, "test_0_login.py": 1, "test_prepare": 1, "test": 1, "test1": 1, "usefixtures": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [["Captured log setup", "\u001b[32mINFO    \u001b[0m root:conftest.py:65 xxxxxxx"], ["Captured log call", "\u001b[32mINFO    \u001b[0m root:basepage.py:118 \u622a\u56fe\u6210\u529f\uff0c\u6587\u4ef6\u4e3aD:\\python\\mystudy\\AppFramework\\Outputs\\Screen_Shots\\\u6d4b\u8bd5\u51c6\u5907,\u786e\u8ba4app\u662f\u5426\u5df2\u767b\u5f55-2020-03-04-21-31-10.png\n\u001b[31m\u001b[1mERROR   \u001b[0m root:basepage.py:41 \u5143\u7d20('id', 'com.xxzb.fenwoo:id/btn_login')\u672a\u627e\u5230\nTraceback (most recent call last):\n  File \"d:\\python\\mystudy\\AppFramework\\Common\\basepage.py\", line 36, in visiable_ele\n    WebDriverWait(self.driver,timeout=20,poll_frequency=0.5).until(EC.visibility_of_element_located(loc))\n  File \"D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 80, in until\n    raise TimeoutException(message, screen, stacktrace)\nselenium.common.exceptions.TimeoutException: Message: \n\n\u001b[32mINFO    \u001b[0m root:test_0_login.py:21 app\u5df2\u767b\u5f55,\u6267\u884c\u6570\u636e\u6e05\u7a7a\u64cd\u4f5c!"]], "duration": 21.054091453552246, "_report_type": "TestReport"}
{"nodeid": "TestCases/test_0_login.py::TestLogin::test_prepare", "location": ["TestCases\\test_0_login.py", 14, "TestLogin.test_prepare"], "keywords": {"()": 1, "TestCases/__init__.py": 1, "AppFramework": 1, "TestLogin": 1, "pytestmark": 1, "test_0_login.py": 1, "test_prepare": 1, "test": 1, "test1": 1, "usefixtures": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [["Captured log setup", "\u001b[32mINFO    \u001b[0m root:conftest.py:65 xxxxxxx"], ["Captured log call", "\u001b[32mINFO    \u001b[0m root:basepage.py:118 \u622a\u56fe\u6210\u529f\uff0c\u6587\u4ef6\u4e3aD:\\python\\mystudy\\AppFramework\\Outputs\\Screen_Shots\\\u6d4b\u8bd5\u51c6\u5907,\u786e\u8ba4app\u662f\u5426\u5df2\u767b\u5f55-2020-03-04-21-31-10.png\n\u001b[31m\u001b[1mERROR   \u001b[0m root:basepage.py:41 \u5143\u7d20('id', 'com.xxzb.fenwoo:id/btn_login')\u672a\u627e\u5230\nTraceback (most recent call last):\n  File \"d:\\python\\mystudy\\AppFramework\\Common\\basepage.py\", line 36, in visiable_ele\n    WebDriverWait(self.driver,timeout=20,poll_frequency=0.5).until(EC.visibility_of_element_located(loc))\n  File \"D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 80, in until\n    raise TimeoutException(message, screen, stacktrace)\nselenium.common.exceptions.TimeoutException: Message: \n\n\u001b[32mINFO    \u001b[0m root:test_0_login.py:21 app\u5df2\u767b\u5f55,\u6267\u884c\u6570\u636e\u6e05\u7a7a\u64cd\u4f5c!"]], "duration": 0.7914471626281738, "_report_type": "TestReport"}
{"nodeid": "TestCases/test_0_login.py::TestLogin::test_login_success[testdatas0]", "location": ["TestCases\\test_0_login.py", 42, "TestLogin.test_login_success[testdatas0]"], "keywords": {"parametrize": 1, "()": 1, "TestCases/__init__.py": 1, "AppFramework": 1, "pytestmark": 1, "TestLogin": 1, "test_0_login.py": 1, "testdatas0": 1, "test": 1, "test1": 1, "test_login_success[testdatas0]": 1, "usefixtures": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 242, "message": "selenium.common.exceptions.InvalidElementStateException: Message: Cannot perform touch on the element"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @pytest.fixture()", "    def init_keep():", "        driver = base_driver(automationName=None,noReset=False)", "        time.sleep(2)", ">       swipe_welcome(driver)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "TestCases\\conftest.py", "lineno": 82, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver.flick(size['width']*0.9,size['height']*0.3,size['width']*0.1,size['height']*0.3)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "TestCases\\conftest.py", "lineno": 46, "message": "in swipe_welcome"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    action.perform()"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\extensions\\action_helpers.py", "lineno": 150, "message": "in flick"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self._driver.execute(Command.TOUCH_ACTION, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\common\\touch_action.py", "lineno": 136, "message": "in perform"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.error_handler.check_response(response)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 321, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    raise wde"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py", "lineno": 29, "message": "in check_response"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super(MobileErrorHandler, self).check_response(response)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py", "lineno": 24, "message": "in check_response"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def check_response(self, response):", "        \"\"\"", "        Checks that a JSON response from the WebDriver does not have an error.", "    ", "        :Args:", "         - response - The JSON response from the WebDriver server as a dictionary", "           object.", "    ", "        :Raises: If the response contains an error message.", "        \"\"\"", "        status = response.get('status', None)", "        if status is None or status == ErrorCode.SUCCESS:", "            return", "        value = None", "        message = response.get(\"message\", \"\")", "        screen = response.get(\"screen\", \"\")", "        stacktrace = None", "        if isinstance(status, int):", "            value_json = response.get('value', None)", "            if value_json and isinstance(value_json, basestring):", "                import json", "                try:", "                    value = json.loads(value_json)", "                    if len(value.keys()) == 1:", "                        value = value['value']", "                    status = value.get('error', None)", "                    if status is None:", "                        status = value[\"status\"]", "                        message = value[\"value\"]", "                        if not isinstance(message, basestring):", "                            value = message", "                            message = message.get('message')", "                    else:", "                        message = value.get('message', None)", "                except ValueError:", "                    pass", "    ", "        exception_class = ErrorInResponseException", "        if status in ErrorCode.NO_SUCH_ELEMENT:", "            exception_class = NoSuchElementException", "        elif status in ErrorCode.NO_SUCH_FRAME:", "            exception_class = NoSuchFrameException", "        elif status in ErrorCode.NO_SUCH_WINDOW:", "            exception_class = NoSuchWindowException", "        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:", "            exception_class = StaleElementReferenceException", "        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:", "            exception_class = ElementNotVisibleException", "        elif status in ErrorCode.INVALID_ELEMENT_STATE:", "            exception_class = InvalidElementStateException", "        elif status in ErrorCode.INVALID_SELECTOR \\", "                or status in ErrorCode.INVALID_XPATH_SELECTOR \\", "                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:", "            exception_class = InvalidSelectorException", "        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:", "            exception_class = ElementNotSelectableException", "        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:", "            exception_class = ElementNotInteractableException", "        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:", "            exception_class = InvalidCookieDomainException", "        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:", "            exception_class = UnableToSetCookieException", "        elif status in ErrorCode.TIMEOUT:", "            exception_class = TimeoutException", "        elif status in ErrorCode.SCRIPT_TIMEOUT:", "            exception_class = TimeoutException", "        elif status in ErrorCode.UNKNOWN_ERROR:", "            exception_class = WebDriverException", "        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:", "            exception_class = UnexpectedAlertPresentException", "        elif status in ErrorCode.NO_ALERT_OPEN:", "            exception_class = NoAlertPresentException", "        elif status in ErrorCode.IME_NOT_AVAILABLE:", "            exception_class = ImeNotAvailableException", "        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:", "            exception_class = ImeActivationFailedException", "        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:", "            exception_class = MoveTargetOutOfBoundsException", "        elif status in ErrorCode.JAVASCRIPT_ERROR:", "            exception_class = JavascriptException", "        elif status in ErrorCode.SESSION_NOT_CREATED:", "            exception_class = SessionNotCreatedException", "        elif status in ErrorCode.INVALID_ARGUMENT:", "            exception_class = InvalidArgumentException", "        elif status in ErrorCode.NO_SUCH_COOKIE:", "            exception_class = NoSuchCookieException", "        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:", "            exception_class = ScreenshotException", "        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:", "            exception_class = ElementClickInterceptedException", "        elif status in ErrorCode.INSECURE_CERTIFICATE:", "            exception_class = InsecureCertificateException", "        elif status in ErrorCode.INVALID_COORDINATES:", "            exception_class = InvalidCoordinatesException", "        elif status in ErrorCode.INVALID_SESSION_ID:", "            exception_class = InvalidSessionIdException", "        elif status in ErrorCode.UNKNOWN_METHOD:", "            exception_class = UnknownMethodException", "        else:", "            exception_class = WebDriverException", "        if value == '' or value is None:", "            value = response['value']", "        if isinstance(value, basestring):", "            if exception_class == ErrorInResponseException:", "                raise exception_class(response, value)", "            raise exception_class(value)", "        if message == \"\" and 'message' in value:", "            message = value['message']", "    ", "        screen = None", "        if 'screen' in value:", "            screen = value['screen']", "    ", "        stacktrace = None", "        if 'stackTrace' in value and value['stackTrace']:", "            stacktrace = []", "            try:", "                for frame in value['stackTrace']:", "                    line = self._value_or_default(frame, 'lineNumber', '')", "                    file = self._value_or_default(frame, 'fileName', '<anonymous>')", "                    if line:", "                        file = \"%s:%s\" % (file, line)", "                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')", "                    if 'className' in frame:", "                        meth = \"%s.%s\" % (frame['className'], meth)", "                    msg = \"    at %s (%s)\"", "                    msg = msg % (meth, file)", "                    stacktrace.append(msg)", "            except TypeError:", "                pass", "        if exception_class == ErrorInResponseException:", "            raise exception_class(response, message)", "        elif exception_class == UnexpectedAlertPresentException:", "            alert_text = None", "            if 'data' in value:", "                alert_text = value['data'].get('text')", "            elif 'alert' in value:", "                alert_text = value['alert'].get('text')", "            raise exception_class(message, screen, stacktrace, alert_text)", ">       raise exception_class(message, screen, stacktrace)", "E       selenium.common.exceptions.InvalidElementStateException: Message: Cannot perform touch on the element"], "reprfuncargs": {"args": [["self", "<appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002AA10229F70>"], ["response", "{'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"Cannot perform touch on the element\",\"s...ctory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\\\\n\\\\tat java.lang.Thread.run(Thread.java:764)\\\\n\"}}'}"]]}, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 242, "message": "InvalidElementStateException"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @pytest.fixture()", "    def init_keep():", "        driver = base_driver(automationName=None,noReset=False)", "        time.sleep(2)", ">       swipe_welcome(driver)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "TestCases\\conftest.py", "lineno": 82, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver.flick(size['width']*0.9,size['height']*0.3,size['width']*0.1,size['height']*0.3)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "TestCases\\conftest.py", "lineno": 46, "message": "in swipe_welcome"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    action.perform()"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\extensions\\action_helpers.py", "lineno": 150, "message": "in flick"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self._driver.execute(Command.TOUCH_ACTION, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\common\\touch_action.py", "lineno": 136, "message": "in perform"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.error_handler.check_response(response)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 321, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    raise wde"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py", "lineno": 29, "message": "in check_response"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super(MobileErrorHandler, self).check_response(response)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py", "lineno": 24, "message": "in check_response"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def check_response(self, response):", "        \"\"\"", "        Checks that a JSON response from the WebDriver does not have an error.", "    ", "        :Args:", "         - response - The JSON response from the WebDriver server as a dictionary", "           object.", "    ", "        :Raises: If the response contains an error message.", "        \"\"\"", "        status = response.get('status', None)", "        if status is None or status == ErrorCode.SUCCESS:", "            return", "        value = None", "        message = response.get(\"message\", \"\")", "        screen = response.get(\"screen\", \"\")", "        stacktrace = None", "        if isinstance(status, int):", "            value_json = response.get('value', None)", "            if value_json and isinstance(value_json, basestring):", "                import json", "                try:", "                    value = json.loads(value_json)", "                    if len(value.keys()) == 1:", "                        value = value['value']", "                    status = value.get('error', None)", "                    if status is None:", "                        status = value[\"status\"]", "                        message = value[\"value\"]", "                        if not isinstance(message, basestring):", "                            value = message", "                            message = message.get('message')", "                    else:", "                        message = value.get('message', None)", "                except ValueError:", "                    pass", "    ", "        exception_class = ErrorInResponseException", "        if status in ErrorCode.NO_SUCH_ELEMENT:", "            exception_class = NoSuchElementException", "        elif status in ErrorCode.NO_SUCH_FRAME:", "            exception_class = NoSuchFrameException", "        elif status in ErrorCode.NO_SUCH_WINDOW:", "            exception_class = NoSuchWindowException", "        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:", "            exception_class = StaleElementReferenceException", "        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:", "            exception_class = ElementNotVisibleException", "        elif status in ErrorCode.INVALID_ELEMENT_STATE:", "            exception_class = InvalidElementStateException", "        elif status in ErrorCode.INVALID_SELECTOR \\", "                or status in ErrorCode.INVALID_XPATH_SELECTOR \\", "                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:", "            exception_class = InvalidSelectorException", "        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:", "            exception_class = ElementNotSelectableException", "        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:", "            exception_class = ElementNotInteractableException", "        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:", "            exception_class = InvalidCookieDomainException", "        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:", "            exception_class = UnableToSetCookieException", "        elif status in ErrorCode.TIMEOUT:", "            exception_class = TimeoutException", "        elif status in ErrorCode.SCRIPT_TIMEOUT:", "            exception_class = TimeoutException", "        elif status in ErrorCode.UNKNOWN_ERROR:", "            exception_class = WebDriverException", "        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:", "            exception_class = UnexpectedAlertPresentException", "        elif status in ErrorCode.NO_ALERT_OPEN:", "            exception_class = NoAlertPresentException", "        elif status in ErrorCode.IME_NOT_AVAILABLE:", "            exception_class = ImeNotAvailableException", "        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:", "            exception_class = ImeActivationFailedException", "        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:", "            exception_class = MoveTargetOutOfBoundsException", "        elif status in ErrorCode.JAVASCRIPT_ERROR:", "            exception_class = JavascriptException", "        elif status in ErrorCode.SESSION_NOT_CREATED:", "            exception_class = SessionNotCreatedException", "        elif status in ErrorCode.INVALID_ARGUMENT:", "            exception_class = InvalidArgumentException", "        elif status in ErrorCode.NO_SUCH_COOKIE:", "            exception_class = NoSuchCookieException", "        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:", "            exception_class = ScreenshotException", "        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:", "            exception_class = ElementClickInterceptedException", "        elif status in ErrorCode.INSECURE_CERTIFICATE:", "            exception_class = InsecureCertificateException", "        elif status in ErrorCode.INVALID_COORDINATES:", "            exception_class = InvalidCoordinatesException", "        elif status in ErrorCode.INVALID_SESSION_ID:", "            exception_class = InvalidSessionIdException", "        elif status in ErrorCode.UNKNOWN_METHOD:", "            exception_class = UnknownMethodException", "        else:", "            exception_class = WebDriverException", "        if value == '' or value is None:", "            value = response['value']", "        if isinstance(value, basestring):", "            if exception_class == ErrorInResponseException:", "                raise exception_class(response, value)", "            raise exception_class(value)", "        if message == \"\" and 'message' in value:", "            message = value['message']", "    ", "        screen = None", "        if 'screen' in value:", "            screen = value['screen']", "    ", "        stacktrace = None", "        if 'stackTrace' in value and value['stackTrace']:", "            stacktrace = []", "            try:", "                for frame in value['stackTrace']:", "                    line = self._value_or_default(frame, 'lineNumber', '')", "                    file = self._value_or_default(frame, 'fileName', '<anonymous>')", "                    if line:", "                        file = \"%s:%s\" % (file, line)", "                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')", "                    if 'className' in frame:", "                        meth = \"%s.%s\" % (frame['className'], meth)", "                    msg = \"    at %s (%s)\"", "                    msg = msg % (meth, file)", "                    stacktrace.append(msg)", "            except TypeError:", "                pass", "        if exception_class == ErrorInResponseException:", "            raise exception_class(response, message)", "        elif exception_class == UnexpectedAlertPresentException:", "            alert_text = None", "            if 'data' in value:", "                alert_text = value['data'].get('text')", "            elif 'alert' in value:", "                alert_text = value['alert'].get('text')", "            raise exception_class(message, screen, stacktrace, alert_text)", ">       raise exception_class(message, screen, stacktrace)", "E       selenium.common.exceptions.InvalidElementStateException: Message: Cannot perform touch on the element"], "reprfuncargs": {"args": [["self", "<appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002AA10229F70>"], ["response", "{'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"Cannot perform touch on the element\",\"s...ctory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\\\\n\\\\tat java.lang.Thread.run(Thread.java:764)\\\\n\"}}'}"]]}, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 242, "message": "InvalidElementStateException"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 242, "message": "selenium.common.exceptions.InvalidElementStateException: Message: Cannot perform touch on the element"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 13.05045461654663, "_report_type": "TestReport"}
{"nodeid": "TestCases/test_0_login.py::TestLogin::test_login_success[testdatas0]", "location": ["TestCases\\test_0_login.py", 42, "TestLogin.test_login_success[testdatas0]"], "keywords": {"parametrize": 1, "()": 1, "TestCases/__init__.py": 1, "AppFramework": 1, "pytestmark": 1, "TestLogin": 1, "test_0_login.py": 1, "testdatas0": 1, "test": 1, "test1": 1, "test_login_success[testdatas0]": 1, "usefixtures": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0, "_report_type": "TestReport"}
{"exitstatus": 1, "$report_type": "SessionFinish"}
