{"pytest_version": "5.2.0", "$report_type": "SessionStart"}
{"nodeid": "", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "Caps/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "Common/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "PageLocators/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "PageObjects/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_0_prepare.py::TestPreprae", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_0_prepare.py::TestPreprae", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_0_prepare.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_1_login.py::TestLogin", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_1_login.py::TestLogin", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_1_login.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_2_invest.py::TestInvest", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_2_invest.py::TestInvest", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_2_invest.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestDatas/__init__.py", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "_report_type": "CollectReport"}
{"nodeid": "TestCases/test_2_invest.py::TestInvest::test_invest_worng[logindata0-testdatas0]", "location": ["TestCases\\test_2_invest.py", 35, "TestInvest.test_invest_worng[logindata0-testdatas0]"], "keywords": {"test_invest_worng[logindata0-testdatas0]": 1, "AppFramework": 1, "test_2_invest.py": 1, "()": 1, "pytestmark": 1, "testinvest": 1, "parametrize": 1, "TestCases/__init__.py": 1, "TestInvest": 1, "usefixtures": 1, "logindata0-testdatas0": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 242, "message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Error executing adbExec. Original error: 'Command ''D:\\\\Program Files (x86)\\\\android-sdk\\\\android-sdk-windows\\\\platform-tools\\\\adb.exe' -P 5037 -s 192.168.215.104\\:5555 shell settings put global hidden_api_policy_pre_p_apps 1' exited with code 20'; Stderr: 'cmd: Can't find service: settings'; Code: '20'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @pytest.fixture(scope='class')", "    def init_class_keep_toast():", ">       driver = base_driver(automationName='UiAutomator2',noReset=True)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "TestCases\\conftest.py", "lineno": 79, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://127.0.0.1:{}/wd/hub\".format(server_port),descired_caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "TestCases\\conftest.py", "lineno": 37, "message": "in base_driver"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super(WebDriver, self).__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py", "lineno": 147, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 157, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py", "lineno": 227, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.error_handler.check_response(response)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 321, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def check_response(self, response):", "        \"\"\"", "        Checks that a JSON response from the WebDriver does not have an error.", "    ", "        :Args:", "         - response - The JSON response from the WebDriver server as a dictionary", "           object.", "    ", "        :Raises: If the response contains an error message.", "        \"\"\"", "        status = response.get('status', None)", "        if status is None or status == ErrorCode.SUCCESS:", "            return", "        value = None", "        message = response.get(\"message\", \"\")", "        screen = response.get(\"screen\", \"\")", "        stacktrace = None", "        if isinstance(status, int):", "            value_json = response.get('value', None)", "            if value_json and isinstance(value_json, basestring):", "                import json", "                try:", "                    value = json.loads(value_json)", "                    if len(value.keys()) == 1:", "                        value = value['value']", "                    status = value.get('error', None)", "                    if status is None:", "                        status = value[\"status\"]", "                        message = value[\"value\"]", "                        if not isinstance(message, basestring):", "                            value = message", "                            message = message.get('message')", "                    else:", "                        message = value.get('message', None)", "                except ValueError:", "                    pass", "    ", "        exception_class = ErrorInResponseException", "        if status in ErrorCode.NO_SUCH_ELEMENT:", "            exception_class = NoSuchElementException", "        elif status in ErrorCode.NO_SUCH_FRAME:", "            exception_class = NoSuchFrameException", "        elif status in ErrorCode.NO_SUCH_WINDOW:", "            exception_class = NoSuchWindowException", "        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:", "            exception_class = StaleElementReferenceException", "        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:", "            exception_class = ElementNotVisibleException", "        elif status in ErrorCode.INVALID_ELEMENT_STATE:", "            exception_class = InvalidElementStateException", "        elif status in ErrorCode.INVALID_SELECTOR \\", "                or status in ErrorCode.INVALID_XPATH_SELECTOR \\", "                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:", "            exception_class = InvalidSelectorException", "        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:", "            exception_class = ElementNotSelectableException", "        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:", "            exception_class = ElementNotInteractableException", "        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:", "            exception_class = InvalidCookieDomainException", "        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:", "            exception_class = UnableToSetCookieException", "        elif status in ErrorCode.TIMEOUT:", "            exception_class = TimeoutException", "        elif status in ErrorCode.SCRIPT_TIMEOUT:", "            exception_class = TimeoutException", "        elif status in ErrorCode.UNKNOWN_ERROR:", "            exception_class = WebDriverException", "        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:", "            exception_class = UnexpectedAlertPresentException", "        elif status in ErrorCode.NO_ALERT_OPEN:", "            exception_class = NoAlertPresentException", "        elif status in ErrorCode.IME_NOT_AVAILABLE:", "            exception_class = ImeNotAvailableException", "        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:", "            exception_class = ImeActivationFailedException", "        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:", "            exception_class = MoveTargetOutOfBoundsException", "        elif status in ErrorCode.JAVASCRIPT_ERROR:", "            exception_class = JavascriptException", "        elif status in ErrorCode.SESSION_NOT_CREATED:", "            exception_class = SessionNotCreatedException", "        elif status in ErrorCode.INVALID_ARGUMENT:", "            exception_class = InvalidArgumentException", "        elif status in ErrorCode.NO_SUCH_COOKIE:", "            exception_class = NoSuchCookieException", "        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:", "            exception_class = ScreenshotException", "        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:", "            exception_class = ElementClickInterceptedException", "        elif status in ErrorCode.INSECURE_CERTIFICATE:", "            exception_class = InsecureCertificateException", "        elif status in ErrorCode.INVALID_COORDINATES:", "            exception_class = InvalidCoordinatesException", "        elif status in ErrorCode.INVALID_SESSION_ID:", "            exception_class = InvalidSessionIdException", "        elif status in ErrorCode.UNKNOWN_METHOD:", "            exception_class = UnknownMethodException", "        else:", "            exception_class = WebDriverException", "        if value == '' or value is None:", "            value = response['value']", "        if isinstance(value, basestring):", "            if exception_class == ErrorInResponseException:", "                raise exception_class(response, value)", "            raise exception_class(value)", "        if message == \"\" and 'message' in value:", "            message = value['message']", "    ", "        screen = None", "        if 'screen' in value:", "            screen = value['screen']", "    ", "        stacktrace = None", "        if 'stackTrace' in value and value['stackTrace']:", "            stacktrace = []", "            try:", "                for frame in value['stackTrace']:", "                    line = self._value_or_default(frame, 'lineNumber', '')", "                    file = self._value_or_default(frame, 'fileName', '<anonymous>')", "                    if line:", "                        file = \"%s:%s\" % (file, line)", "                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')", "                    if 'className' in frame:", "                        meth = \"%s.%s\" % (frame['className'], meth)", "                    msg = \"    at %s (%s)\"", "                    msg = msg % (meth, file)", "                    stacktrace.append(msg)", "            except TypeError:", "                pass", "        if exception_class == ErrorInResponseException:", "            raise exception_class(response, message)", "        elif exception_class == UnexpectedAlertPresentException:", "            alert_text = None", "            if 'data' in value:", "                alert_text = value['data'].get('text')", "            elif 'alert' in value:", "                alert_text = value['alert'].get('text')", "            raise exception_class(message, screen, stacktrace, alert_text)", ">       raise exception_class(message, screen, stacktrace)", "E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Error executing adbExec. Original error: 'Command ''D:\\\\Program Files (x86)\\\\android-sdk\\\\android-sdk-windows\\\\platform-tools\\\\adb.exe' -P 5037 -s 192.168.215.104\\:5555 shell settings put global hidden_api_policy_pre_p_apps 1' exited with code 20'; Stderr: 'cmd: Can't find service: settings'; Code: '20'"], "reprfuncargs": {"args": [["self", "<selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000142BB09CA30>"], ["response", "{'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...iver\\\\\\\\lib\\\\\\\\protocol\\\\\\\\protocol.js:388:37)\\\\n    at process._tickCallback (internal/process/next_tick.js:68:7)\"}}'}"]]}, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 242, "message": "WebDriverException"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @pytest.fixture(scope='class')", "    def init_class_keep_toast():", ">       driver = base_driver(automationName='UiAutomator2',noReset=True)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "TestCases\\conftest.py", "lineno": 79, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://127.0.0.1:{}/wd/hub\".format(server_port),descired_caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "TestCases\\conftest.py", "lineno": 37, "message": "in base_driver"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super(WebDriver, self).__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py", "lineno": 147, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 157, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py", "lineno": 227, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.error_handler.check_response(response)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 321, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def check_response(self, response):", "        \"\"\"", "        Checks that a JSON response from the WebDriver does not have an error.", "    ", "        :Args:", "         - response - The JSON response from the WebDriver server as a dictionary", "           object.", "    ", "        :Raises: If the response contains an error message.", "        \"\"\"", "        status = response.get('status', None)", "        if status is None or status == ErrorCode.SUCCESS:", "            return", "        value = None", "        message = response.get(\"message\", \"\")", "        screen = response.get(\"screen\", \"\")", "        stacktrace = None", "        if isinstance(status, int):", "            value_json = response.get('value', None)", "            if value_json and isinstance(value_json, basestring):", "                import json", "                try:", "                    value = json.loads(value_json)", "                    if len(value.keys()) == 1:", "                        value = value['value']", "                    status = value.get('error', None)", "                    if status is None:", "                        status = value[\"status\"]", "                        message = value[\"value\"]", "                        if not isinstance(message, basestring):", "                            value = message", "                            message = message.get('message')", "                    else:", "                        message = value.get('message', None)", "                except ValueError:", "                    pass", "    ", "        exception_class = ErrorInResponseException", "        if status in ErrorCode.NO_SUCH_ELEMENT:", "            exception_class = NoSuchElementException", "        elif status in ErrorCode.NO_SUCH_FRAME:", "            exception_class = NoSuchFrameException", "        elif status in ErrorCode.NO_SUCH_WINDOW:", "            exception_class = NoSuchWindowException", "        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:", "            exception_class = StaleElementReferenceException", "        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:", "            exception_class = ElementNotVisibleException", "        elif status in ErrorCode.INVALID_ELEMENT_STATE:", "            exception_class = InvalidElementStateException", "        elif status in ErrorCode.INVALID_SELECTOR \\", "                or status in ErrorCode.INVALID_XPATH_SELECTOR \\", "                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:", "            exception_class = InvalidSelectorException", "        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:", "            exception_class = ElementNotSelectableException", "        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:", "            exception_class = ElementNotInteractableException", "        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:", "            exception_class = InvalidCookieDomainException", "        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:", "            exception_class = UnableToSetCookieException", "        elif status in ErrorCode.TIMEOUT:", "            exception_class = TimeoutException", "        elif status in ErrorCode.SCRIPT_TIMEOUT:", "            exception_class = TimeoutException", "        elif status in ErrorCode.UNKNOWN_ERROR:", "            exception_class = WebDriverException", "        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:", "            exception_class = UnexpectedAlertPresentException", "        elif status in ErrorCode.NO_ALERT_OPEN:", "            exception_class = NoAlertPresentException", "        elif status in ErrorCode.IME_NOT_AVAILABLE:", "            exception_class = ImeNotAvailableException", "        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:", "            exception_class = ImeActivationFailedException", "        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:", "            exception_class = MoveTargetOutOfBoundsException", "        elif status in ErrorCode.JAVASCRIPT_ERROR:", "            exception_class = JavascriptException", "        elif status in ErrorCode.SESSION_NOT_CREATED:", "            exception_class = SessionNotCreatedException", "        elif status in ErrorCode.INVALID_ARGUMENT:", "            exception_class = InvalidArgumentException", "        elif status in ErrorCode.NO_SUCH_COOKIE:", "            exception_class = NoSuchCookieException", "        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:", "            exception_class = ScreenshotException", "        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:", "            exception_class = ElementClickInterceptedException", "        elif status in ErrorCode.INSECURE_CERTIFICATE:", "            exception_class = InsecureCertificateException", "        elif status in ErrorCode.INVALID_COORDINATES:", "            exception_class = InvalidCoordinatesException", "        elif status in ErrorCode.INVALID_SESSION_ID:", "            exception_class = InvalidSessionIdException", "        elif status in ErrorCode.UNKNOWN_METHOD:", "            exception_class = UnknownMethodException", "        else:", "            exception_class = WebDriverException", "        if value == '' or value is None:", "            value = response['value']", "        if isinstance(value, basestring):", "            if exception_class == ErrorInResponseException:", "                raise exception_class(response, value)", "            raise exception_class(value)", "        if message == \"\" and 'message' in value:", "            message = value['message']", "    ", "        screen = None", "        if 'screen' in value:", "            screen = value['screen']", "    ", "        stacktrace = None", "        if 'stackTrace' in value and value['stackTrace']:", "            stacktrace = []", "            try:", "                for frame in value['stackTrace']:", "                    line = self._value_or_default(frame, 'lineNumber', '')", "                    file = self._value_or_default(frame, 'fileName', '<anonymous>')", "                    if line:", "                        file = \"%s:%s\" % (file, line)", "                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')", "                    if 'className' in frame:", "                        meth = \"%s.%s\" % (frame['className'], meth)", "                    msg = \"    at %s (%s)\"", "                    msg = msg % (meth, file)", "                    stacktrace.append(msg)", "            except TypeError:", "                pass", "        if exception_class == ErrorInResponseException:", "            raise exception_class(response, message)", "        elif exception_class == UnexpectedAlertPresentException:", "            alert_text = None", "            if 'data' in value:", "                alert_text = value['data'].get('text')", "            elif 'alert' in value:", "                alert_text = value['alert'].get('text')", "            raise exception_class(message, screen, stacktrace, alert_text)", ">       raise exception_class(message, screen, stacktrace)", "E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Error executing adbExec. Original error: 'Command ''D:\\\\Program Files (x86)\\\\android-sdk\\\\android-sdk-windows\\\\platform-tools\\\\adb.exe' -P 5037 -s 192.168.215.104\\:5555 shell settings put global hidden_api_policy_pre_p_apps 1' exited with code 20'; Stderr: 'cmd: Can't find service: settings'; Code: '20'"], "reprfuncargs": {"args": [["self", "<selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000142BB09CA30>"], ["response", "{'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...iver\\\\\\\\lib\\\\\\\\protocol\\\\\\\\protocol.js:388:37)\\\\n    at process._tickCallback (internal/process/next_tick.js:68:7)\"}}'}"]]}, "reprlocals": null, "reprfileloc": {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 242, "message": "WebDriverException"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "D:\\Program Files (x86)\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 242, "message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Error executing adbExec. Original error: 'Command ''D:\\\\Program Files (x86)\\\\android-sdk\\\\android-sdk-windows\\\\platform-tools\\\\adb.exe' -P 5037 -s 192.168.215.104\\:5555 shell settings put global hidden_api_policy_pre_p_apps 1' exited with code 20'; Stderr: 'cmd: Can't find service: settings'; Code: '20'"}, null]]}, "when": "setup", "user_properties": [], "sections": [["Captured log setup", "\u001b[32mINFO    \u001b[0m root:conftest.py:65 xxxxxxx"]], "duration": 2.4702792167663574, "_report_type": "TestReport"}
{"nodeid": "TestCases/test_2_invest.py::TestInvest::test_invest_worng[logindata0-testdatas0]", "location": ["TestCases\\test_2_invest.py", 35, "TestInvest.test_invest_worng[logindata0-testdatas0]"], "keywords": {"test_invest_worng[logindata0-testdatas0]": 1, "AppFramework": 1, "test_2_invest.py": 1, "()": 1, "pytestmark": 1, "testinvest": 1, "parametrize": 1, "TestCases/__init__.py": 1, "TestInvest": 1, "usefixtures": 1, "logindata0-testdatas0": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [["Captured log setup", "\u001b[32mINFO    \u001b[0m root:conftest.py:65 xxxxxxx"]], "duration": 0.0, "_report_type": "TestReport"}
{"exitstatus": 1, "$report_type": "SessionFinish"}
